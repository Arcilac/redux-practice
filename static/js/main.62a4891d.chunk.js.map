{"version":3,"sources":["store/user.js","lib/fetch.js","api.js","store/rates.js","store/store.js","components/RateTable.js","components/CurrencyCodePicker.js","components/AmountField.js","components/ExchangeRate.js","index.js"],"names":["initialState","fullName","loggedIn","getName","state","user","split","toLowerCase","sleep","time","Promise","res","setTimeout","getExchangeRates","base","supportedCurrencies","symbols","filter","symbol","join","async","url","search","params","URLSearchParams","Set","get","rates","exchangeRates","json","success","fetch","concat","then","handleAPIErrors","console","error","info","USD","amount","currencyCode","currencyData","displayLabel","code","rate","getAmount","getCurrencyCode","getCurrencyData","getSupportedCurrencies","AMOUNT_CHANGED","CURRENCY_CODE_CHANGED","changeAmount","type","payload","changeCurrencyCode","dispatch","getState","store","createStore","combineReducers","arguments","length","undefined","action","codes","Object","keys","applyMiddleware","thunk","window","_REDUX_DEVTOOLS_EXTENSION_","RateTable","_ref","name","useSelector","_jsxs","className","children","_jsx","values","map","_ref2","exchangeAmount","toLocaleString","style","currency","colSpan","CurrencyCodePicker","useDispatch","value","onChange","e","target","AmountField","dispach","ExchangeRate","_Fragment","ReactDOM","render","Provider","document","getElementById"],"mappings":"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","file":"static/js/main.62a4891d.chunk.js","sourcesContent":["const initialState = {\n  fullName: \"Camila\",\n  loggedIn: false,\n}\n\nexport function userReducer(state = initialState, action) {\n  return state\n}\n\n// selectors\nexport const getName = (state) => {\n  return state.user.fullName.split(\" \")[0].toLowerCase()\n}\n","import exchangeRates from \"./rates.json\"\n\n// sleep helper to simulate a network call\nconst sleep = (time) => new Promise((res) => setTimeout(res, time))\n\n// since we only make a single fetch call\n// we're going to use this mock fetch method\n// which will simulate a short delay and return\n// with exchange rates after a short period\nexport async function fetch(url) {\n  const [, search = \"\"] = url.split(\"?\")\n  const params = new URLSearchParams(search)\n  await sleep(400)\n  const symbols = new Set((params.get(\"symbols\") || \"\").split(\",\"))\n  const base = params.get(\"base\")\n  const rates = exchangeRates[base]\n  return {\n    // simulate the JSON method on the fetch response\n    async json() {\n      return {\n        success: true,\n        rates,\n      }\n    },\n  }\n}\n","// because the API we were using stopped being free\n// we've added this mock fetch method, which supplies\n// its own exchange rate data\nimport { fetch } from \"./lib/fetch\"\n\n// helper to make our exchange rate API call\nexport function getExchangeRates(base, supportedCurrencies) {\n  const symbols = supportedCurrencies\n    .filter((symbol) => symbol !== base) // exclude your own code from requested symbols\n    .join()\n  const url = `http://api.exchangeratesapi.io/latest?base=${base}&symbols=${symbols}`\n  return fetch(url)\n    .then((res) => res.json())\n    .then(handleAPIErrors)\n    .then((res) => res.rates)\n}\n\n// if there was an error log it and return super basic mock data\n// errors for this API came back in the form of { success: false, error: {...}}\n// so we can check for that and log any errors and then respond with a basic\n// valid response so the app doesn't crash\nfunction handleAPIErrors(res) {\n  if (res.success) return res\n  console.error(`Server Error: ${res.error.info}`)\n  return {\n    rates: {\n      USD: 1.0,\n    },\n  }\n}\n","import { getExchangeRates } from \"../api\"\n\nconst initialState = {\n  amount: \"19.99\",\n  currencyCode: \"JPY\",\n  currencyData: { USD: { displayLabel: \"Us Dollars\", code: \"USD\", rate: 1.0 } },\n  supportedCurrencies: [\"USD\", \"EUR\", \"JPY\", \"CAD\", \"GBP\", \"MXN\"],\n}\n\nexport function ratesReducer(state = initialState, action) {\n  switch (action.type) {\n    case AMOUNT_CHANGED:\n      return { ...state, amount: action.payload }\n    case CURRENCY_CODE_CHANGED:\n      return { ...state, currencyCode: action.payload }\n    case \"rates/labelReceived\": {\n      const { displayLabel, currencyCode } = action.payload\n      return {\n        ...state,\n        currencyData: {\n            ...state.currencyData,\n            [currencyCode]: {\n                ...state.currencyData[currencyCode],\n                displayLabel,\n            },\n        },\n        }\n    }\n    case \"rates/ratesReceived\": {\n      const codes = Object.keys(action.payload).concat(state.currencyCode)\n      const currencyData = {}\n      for (let code in action.payload) {\n        currencyData[code] = { code, rate: action.payload[code] }\n      }\n      return {\n        ...state,\n        currencyData,\n        supportedCurrencies: codes,\n      }\n    }\n    default:\n      return state\n  }\n}\n\n// Selectors\nexport const getAmount = (state) => state.rates.amount\nexport const getCurrencyCode = (state) => state.rates.currencyCode\nexport const getCurrencyData = (state) => state.rates.currencyData\nexport const getSupportedCurrencies = (state) => state.rates.supportedCurrencies\nexport const getDisplayLabel = (state, currencyCode) => {\n    const match = state.rates.currencyData[currencyCode]\n    if (match) return match.displayLabel\n}\n\n\n// Action types\nexport const AMOUNT_CHANGED = \"rates/amountChanged\"\nexport const CURRENCY_CODE_CHANGED = \"rates/currencyCodeChanged\"\n\n// actions creators\nexport const changeAmount = (amount) => ({\n  type: AMOUNT_CHANGED,\n  payload: amount,\n})\nexport function changeCurrencyCode(currencyCode) {\n  return function changeCurrencyCodeThunk(dispatch, getState) {\n    const state = getState()\n    const supportedCurrencies = getSupportedCurrencies(state)\n    dispatch({\n      type: CURRENCY_CODE_CHANGED,\n      payload: currencyCode,\n    })\n    getExchangeRates(currencyCode, supportedCurrencies).then((rates) => {\n      dispatch({\n        type: \"rates/ratesReceived\",\n        payload: rates,\n      })\n    })\n  }\n}\n// thunks\nexport function getInitialRates(dispach, getState) {\n  const state = getState()\n  const currencyCode = getCurrencyCode(state)\n  dispach(changeCurrencyCode(currencyCode))\n}\n","import { createStore, combineReducers, applyMiddleware } from \"redux\"\nimport thunk from \"redux-thunk\"\nimport { userReducer } from \"./user\"\nimport { ratesReducer } from \"./rates\"\n\nexport const store = createStore(\n  combineReducers({\n    user: userReducer,\n    rates: ratesReducer,\n  }),\n  applyMiddleware(thunk),\n  window._REDUX_DEVTOOLS_EXTENSION_ && window._REDUX_DEVTOOLS_EXTENSION_()\n)\n","import { useSelector } from \"react-redux\"\nimport { getName } from \"../store/user\"\n\nexport function RateTable({ currencyData, amount }) {\n  const name = useSelector(getName)\n  return (\n    <table className=\"ExchangeRate-table\">\n      <tbody>\n        {Object.values(currencyData).map(({ code, rate }) => {\n          // NOTE: normally avoid floating point math in JS\n          const exchangeAmount = amount * rate || 0.0\n          return (\n            <tr key={code}>\n              <td>{code}</td>\n              <td>\n                {exchangeAmount.toLocaleString(\"en\", {\n                  style: \"currency\",\n                  currency: code,\n                })}\n              </td>\n            </tr>\n          )\n        })}\n      </tbody>\n      <tfoot>\n        <tr>\n          <td colSpan={2}>Prepared for {name}</td>\n        </tr>\n      </tfoot>\n    </table>\n  )\n}\n","import { useDispatch, useSelector } from \"react-redux\"\nimport { changeCurrencyCode, getSupportedCurrencies } from \"../store/rates\"\n\nexport function CurrencyCodePicker({ currencyCode }) {\n  const dispatch = useDispatch()\n  const supportedCurrencies = useSelector(getSupportedCurrencies)\n  function onChange(e) {\n    dispatch(changeCurrencyCode(e.target.value))\n  }\n  return (\n    <select className=\"currencyCode\" value={currencyCode} onChange={onChange}>\n      {supportedCurrencies.map((code) => (\n        <option key={code} value={code}>\n          {code}\n        </option>\n      ))}\n    </select>\n  )\n}\n","import { useDispatch } from \"react-redux\"\nimport { changeAmount } from \"../store/rates\"\n\nexport function AmountField({ amount }) {\n  const dispach = useDispatch()\n  function onChange(e) {\n    dispach(changeAmount(e.target.value))\n  }\n  return (\n    <form className=\"ExchangeRate-form\">\n      <input\n        aria-label=\"Amount in base currency\"\n        type=\"text\"\n        value={amount}\n        onChange={onChange}\n      />\n    </form>\n  )\n}\n","import { useSelector } from \"react-redux\"\nimport { RateTable } from \"./RateTable\"\nimport { CurrencyCodePicker } from \"./CurrencyCodePicker\"\nimport { AmountField } from \"./AmountField\"\nimport { \n  getAmount, \n  getCurrencyData, \n  getCurrencyCode,\n} from \"../store/rates\"\n\nexport function ExchangeRate() {\n  const amount =useSelector(getAmount)\n  const currencyCode =useSelector(getCurrencyCode)\n  const currencyData = useSelector(getCurrencyData)\n\n  return (\n    <>\n      <section>\n        <h1 className=\"ExchangeRate-header\">\n          Exchange Rates <CurrencyCodePicker currencyCode={currencyCode} />\n        </h1>\n      </section>\n      <section>\n        <AmountField amount={amount} />\n      </section>\n      <section>\n        <RateTable currencyData={currencyData} amount={amount} />\n      </section>\n    </>\n  )\n}\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport { Provider } from \"react-redux\"\nimport { store } from \"./store/store\"\nimport { ExchangeRate } from \"./components/ExchangeRate\"\nimport { getInitialRates } from \"./store/rates\"\nimport \"./style.css\"\n\n// kick start AJAX call for exchange rates\nstore.dispatch(getInitialRates)\n\nReactDOM.render(\n  <Provider store={store}>\n    <ExchangeRate />\n  </Provider>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}